# %%
from plexapi.server import PlexServer
import webbrowser
import requests
import os
from PIL import Image
import numpy as np
import scipy
import scipy.misc
import scipy.cluster
import matplotlib.pyplot as plt
import matplotlib as mpl
import colorsys

# Credentials
env = os.environ
PLEX_SERVER_URL = 'http://127.0.0.1:32400'  # Unless changed, this remains constant for everyone running the script locally
TOKEN = env['PLEX_TOKEN']                   # Plex Token
SESSION_ID = env['TMDB_SESSION_ID']         # Your Session ID generated by the auth sequence
LIST_ID = env['TMDB_LIST_ID']               # ID for TMDb list
TMDB_BASE = 'https://api.themoviedb.org'    # API Base (/3 left out to accommodate for the API version 4)
TMDB_API = env['TMDB_API']                  # TMDb API key

# Connect to server
server = PlexServer(PLEX_SERVER_URL, TOKEN)


# Populate DB with movies
movies = []
mmap = {}
for movie in server.library.section('Movies').all():
    try:
        idx = movie.guids[1].id[7:]
        movies.append(idx)
        mmap[idx] = movie.title
    except:
        pass


def download_posters(idx):
    """
    Downloads a 200px width poster of a movie from
    TMDb given the movie ID.

    Args:
        idx (`int`): The TMDb movie ID
    """
    url = f'{TMDB_BASE}/3/movie/{idx}?api_key={TMDB_API}'
    res = requests.get(url).json()
    poster_path = f'https://www.themoviedb.org/t/p/w200/{res["poster_path"]}'
    res = requests.get(poster_path).content
    with open(f'data/posters/{idx}.jpg', 'wb') as f:
        f.write(res)


def clear_list(list_id):
    """
    Clears the list of movies.
    """
    url = f'{TMDB_BASE}/3/list/{list_id}/clear?api_key={TMDB_API}&session_id={SESSION_ID}&confirm=true'
    res = requests.post(url)
    if res.status_code not in [200,201]:
        raise Exception(f'Error {res.status_code} clearing list: {res.text}')
    return res


def auth_request():
    """
    Generates an request token.
    """
    url = f'{TMDB_BASE}/3/authentication/token/new?api_key={TMDB_API}'
    res = requests.get(url)
    token = res.json()['request_token']
    webbrowser.open(f'https://www.themoviedb.org/authenticate/{token}')
    input('Press any key to continue: > ')
    return token


def auth_session(auth_token):
    """
    Generates a session ID given the request token.

    Args:
        auth_token (`str`): The request token
    """
    global SESSION_ID
    url = f'{TMDB_BASE}/3/authentication/session/new?api_key={TMDB_API}'
    res = requests.post(url, json={'request_token': auth_token})
    session = res.json()['session_id']
    SESSION_ID = session
    return session


def get_list_details(list_id):
    """
    API call to TMDb to get the list of movies.
    """
    url = f'{TMDB_BASE}/3/list/{list_id}?api_key={TMDB_API}'
    res = requests.get(url)
    if res.status_code not in [200,201]:
        raise Exception(f'Error getting list: {res.text}')
    res = [x['id'] for x in res.json()['items']]
    return res


def add_to_list(list_id, idx):
    """
    Add a movie to the list.

    Args:
        idx (`int`): The TMDb movie ID
    """
    url = f'{TMDB_BASE}/3/list/{list_id}/add_item?api_key={TMDB_API}&session_id={SESSION_ID}'
    res = requests.post(
        url,
        json = {'media_id': idx},
        headers={'Content-Type': 'application/json'}
    )
    if res.status_code not in [200,201]:
        raise Exception(f'Error adding movie to list: {res.text}')
    return res


def update_list(list_id):
    """
    Updates the list of movies from Plex Server.
    """
    current_list = get_list_details(list_id)
    for idx in [idx for idx in movies if idx not in current_list]:
        add_to_list(idx)


def get_dominant_colors(image_path, num_clusters=5):
    """
    Isolate dominant color from downloaded poster using K-Means Clustering.

    Args:
        image_path (`str`): The path to the downloaded poster
        num_clusters (`int`): The number of clusters to use
    
    Returns:
        `tuple`: The Luminance, Hue and Saturation of the dominant color
    """ 
    im = Image.open(image_path)
    # Uncomment line below to optimize even further
    # im = im.resize((150, 150))
    ar = np.asarray(im)
    shape = ar.shape
    ar = ar.reshape(np.product(shape[:2]), shape[2]).astype(float)
    codes, _ = scipy.cluster.vq.kmeans(ar, num_clusters)
    vecs, _ = scipy.cluster.vq.vq(ar, codes)    # assign codes
    counts, _ = np.histogram(vecs, len(codes))  # count occurrences
    index_max = np.argmax(counts) # find most frequent
    peak = codes[index_max]
    
    # Convert RGB to HSL
    h,l,s = colorsys.rgb_to_hls(*[x/255 for x in peak])
    # Scale back since colorsys returns HSL in closed interval values.
    hsl = [h * 360, s * 100, l * 100]
    # Round off to interger values
    h,s,l =  [round(x) for x in hsl]
    # Return in custom order
    return (l,h,s)


def sort_movies():
    """
    Sort movie IDs by dominant color.

    Returns:
        `list`: The movie IDs sorted by dominant color
        `list`: The dominant colors sorted by dominant color
    """
    movie_color_map = {}
    # Map movies to dominant colors
    for idx in movies:
        dominant_color = get_dominant_colors(f'data/posters/{idx}.jpg')
        movie_color_map[idx] = dominant_color
    
    # Sort movies by color
    movie_color_map = list(movie_color_map.items())
    movie_color_map.sort(key=lambda x: x[-1])
    # Return only movie IDs
    return [x[0] for x in movie_color_map], [x[1] for x in movie_color_map]
    



# %%
# Authentication sequence if session ID not set
if SESSION_ID in [None, '']:
    auth_session(auth_request())

# %%
# Populate list that is color sorted
movies, colors = sort_movies()

# %%
# Visualize Color Palette
rgb_colors = [colorsys.hls_to_rgb(h/360,l/100,s/100) for l,h,s in colors]
# rounder = 2
# rgb_colors = [(round(r,rounder), round(g,rounder), round(b,rounder)) for r,g,b in rgb_colors]
rgb_colors.sort()
fig, ax = plt.subplots(figsize=(10,1))
cmap = mpl.colors.ListedColormap(rgb_colors, name='my_colormap')
cb = mpl.colorbar.ColorbarBase(ax, cmap=cmap, orientation='horizontal')
plt.tight_layout()
plt.show()
# %%
# Clear list
clear_list(LIST_ID)
# Add to list from sorted
for idx in movies:
    add_to_list(LIST_ID, idx)

# %%
